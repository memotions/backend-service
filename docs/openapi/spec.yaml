openapi: 3.0.0
info:
  title: Memotions API
  version: 1.0.0
  description: API for Memotionsâ€”Journaling application with gamification and machine learning features
externalDocs:
  url: https://github.com/memotions/backend-service
  description: Memotions API Repository
servers:
  - url: https://backend-api-635053273661.asia-southeast2.run.app
    description: Memotions API Cloud Server
  - url: http://localhost:8080
    description: Memotions API Local Server
security:
  - bearerAuth: []
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidationError'
  /auth/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
  /auth/profile:
    get:
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          description: Unauthorized
  /journals:
    get:
      summary: Get current user journals
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search query for journals
        - in: query
          name: tags
          schema:
            type: string
          required: false
          description: Comma-separated list of tags
          example: 'school,work'
        - in: query
          name: emotions
          schema:
            type: string
          required: false
          description: Comma-separated list of emotion classes
          example: 'HAPPY,ANGER'
        - in: query
          name: date
          schema:
            type: string
          required: false
          description: Date for filtering journals
          example: '2023-01-01'
        - in: query
          name: startDate
          schema:
            type: string
          required: false
          description: Start date for filtering journals
          example: '2023-01-01'
        - in: query
          name: endDate
          schema:
            type: string
          required: false
          description: End date for filtering journals
          example: '2023-12-31'
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Maximum number of journals to retrieve
          example: 10
      responses:
        '200':
          description: Journals retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Journal'
        '401':
          description: Unauthorized
    post:
      summary: Create a new journal
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                datetime:
                  type: string
                  format: date-time
                starred:
                  type: boolean
                  default: false
                status:
                  type: string
                  enum:
                    - DRAFT
                    - PUBLISHED
                    - ANALYZED
                  default: DRAFT
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Journal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
  /journals/{journalId}:
    get:
      summary: Get a journal by ID
      security:
        - bearerAuth: []
      parameters:
        - name: journalId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Journal retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'
        '401':
          description: Unauthorized
        '404':
          description: Journal not found
    patch:
      summary: Update a journal by ID
      security:
        - bearerAuth: []
      parameters:
        - name: journalId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                datetime:
                  type: string
                  format: date-time
                starred:
                  type: boolean
                  default: false
                status:
                  type: string
                  enum:
                    - DRAFT
                    - PUBLISHED
                    - ANALYZED
                  default: DRAFT
      responses:
        '200':
          description: Journal updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
        '404':
          description: Journal not found
    delete:
      summary: Delete a journal by ID
      security:
        - bearerAuth: []
      parameters:
        - name: journalId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Journal deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Journal not found
  /journals/{journalId}/star:
    patch:
      summary: Toggle star status for a journal
      security:
        - bearerAuth: []
      parameters:
        - name: journalId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Journal starred/unstarred successfully
        '401':
          description: Unauthorized
        '404':
          description: Journal not found
  /journals/{journalId}/tags:
    get:
      summary: Get all tags for a journal
      security:
        - bearerAuth: []
      parameters:
        - name: journalId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Tags retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
        '404':
          description: Journal not found
  /journals/{journalId}/tags/{tagName}:
    patch:
      summary: Add or remove a tag from a journal
      security:
        - bearerAuth: []
      parameters:
        - name: journalId
          in: path
          required: true
          schema:
            type: integer
        - name: tagName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Tag added/removed from journal successfully
        '401':
          description: Unauthorized
        '404':
          description: Journal or tag not found
  /tags:
    get:
      summary: Get current user tags
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Tags retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
    post:
      summary: Create a new tag
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
  /tags/{tagId}:
    get:
      summary: Get a tag by ID
      security:
        - bearerAuth: []
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Tag retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
        '404':
          description: Tag not found
    delete:
      summary: Delete a tag
      security:
        - bearerAuth: []
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Tag deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Tag not found
  /achievements:
    get:
      summary: Get current user achievements
      responses:
        '200':
          description: Achievements retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Achievement'
  /achievements/{achievementId}:
    get:
      summary: Get an achievement by ID
      parameters:
        - name: achievementId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Achievement retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Achievement'
        '404':
          description: Achievement not found
  /streak:
    get:
      summary: Get current user streak
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Streak retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Streak'
        '401':
          description: Unauthorized
  /emotion-analysis:
    get:
      summary: Get all user emotions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Emotions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupedEmotionAnalysis'
        '401':
          description: Unauthorized
  /stats:
    get:
      summary: Get current user stats
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Stats retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
        '401':
          description: Unauthorized
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
    Journal:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        datetime:
          type: string
          format: date-time
        starred:
          type: boolean
        status:
          type: string
          enum:
            - DRAFT
            - PUBLISHED
            - ANALYZED
        tags:
          type: array
          items:
            type: string
        emotionAnalysis:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              confidence:
                type: number
        feedback:
          type: string
        createdAt:
          type: string
          format: date-time
    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    EmotionAnalysis:
      type: object
      properties:
        emotion:
          type: string
        confidence:
          type: number
        analyzedAt:
          type: string
          format: date-time
    GroupedEmotionAnalysis:
      type: array
      items:
        type: object
        properties:
          journalId:
            type: integer
          journalDatetime:
            type: string
            format: date-time
          emotionAnalysis:
            type: array
            items:
              $ref: '#/components/schemas/EmotionAnalysis'
          analyzedAt:
            type: string
            format: date-time
    Achievement:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
        description:
          type: string
        tier:
          type: number
        pointsAwarded:
          type: integer
        completed:
          type: boolean
    Streak:
      type: object
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        streakLength:
          type: integer
    Level:
      type: object
      properties:
        currentLevel:
          type: integer
        totalPoints:
          type: integer
        nextLevel:
          type: integer
        pointsRequired:
          type: integer
    Stats:
      type: object
      properties:
        journalCount:
          type: integer
        currentStreak:
          $ref: '#/components/schemas/Streak'
        currentLevel:
          $ref: '#/components/schemas/Level'
        achievementCount:
          type: object
          properties:
            completed:
              type: integer
            total:
              type: integer
        emotionCount:
          type: object
          properties:
            happy:
              type: integer
            sad:
              type: integer
            anger:
              type: integer
            scared:
              type: integer
            neutral:
              type: integer
    CommonError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    ValidationError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        path:
          type: string
        details:
          type: array
          items:
            type: object
